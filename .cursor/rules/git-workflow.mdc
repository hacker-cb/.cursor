---
alwaysApply: true
---
# Git Workflow for Cursor Workspace

Git practices specific to this Cursor configuration workspace.

## Branch Naming Conventions

Use descriptive branch names that reflect the type of change.

**Pattern:** `type/description` or `type-description`

**Common types:**
- `add-*` - New commands or rules
- `update-*` - Modifications to existing files
- `fix-*` - Bug fixes or corrections
- `refactor-*` - Restructuring without behavior change
- `remove-*` - Deletions

**Examples:**
- `add-security-audit-command`
- `update-shared-rules-sync`
- `fix-readme-sync`
- `refactor-command-structure`

## Commit Message Format

Follow conventional commits for workspace changes.

**Format:** `type(scope): description`

**Types for this workspace:**
- `feat` - New command or rule file
- `fix` - Bug fix in command/rule logic
- `docs` - README or documentation updates
- `refactor` - Restructure commands or rules
- `chore` - Maintenance, cleanup, organization

**Scopes:**
- `command` - Changes to `/commands/` directory
- `rule` - Changes to `/rules/` (shared rules)
- `workspace-rule` - Changes to `.cursor/rules/` (workspace rules)
- `readme` - README.md updates
- `sync` - Sync-related changes

**Examples:**
- `feat(command): add security-audit workflow`
- `fix(rule): correct version control guidelines`
- `docs(readme): update command table`
- `refactor(command): consolidate testing commands`
- `chore(workspace): clean up old files`

## Commit Practices

**Atomic commits:**
- One logical change per commit
- Command file changes → separate commit
- Rule file changes → separate commit
- README sync → automatic or separate commit

**What to commit:**
- Command files (`.md` in `commands/`)
- Shared rule files (`.mdc` in `rules/`)
- Workspace rule files (`.mdc` in `.cursor/rules/`)
- README.md updates
- Git-tracked configuration files

**Never commit:**
- IDE state files (unless tracked)
- Extension data (unless tracked)
- Personal project data
- Temporary files
- Untracked files per git-only policy

## Workflow Process

**Starting work:**
1. Create descriptive feature branch
2. Make focused changes (command, rule, or workspace rule)
3. Test changes if applicable
4. Update README.md if command/rule added or modified
5. Commit with clear message

**Before creating PR:**
- Self-review all changes
- Verify README.md is in sync
- Check no unintended files included
- Ensure commit messages follow format
- No WIP or debug commits

**Pull request:**
- Clear title describing change
- Explain what and why in description
- Link to related issues if applicable
- Mark as draft if feedback needed early

## Change Types and Handling

**Adding new command:**
- Create command file in `commands/`
- Follow command file guidelines (50-150 lines)
- Update README.md table
- Commit: `feat(command): add [command-name]`

**Adding new shared rule:**
- Create rule file in `rules/`
- Follow shared rules guidelines
- Keep universal and framework-agnostic
- Commit: `feat(rule): add [rule-name]`

**Adding/updating workspace rule:**
- Create/modify rule in `.cursor/rules/`
- Keep focused on this workspace
- Commit: `feat(workspace-rule): add [rule-name]` or `fix(workspace-rule): update [rule-name]`

**Updating README.md:**
- Sync with command/rule changes
- Update descriptions if changed
- Update status badges if needed
- Commit: `docs(readme): sync with [change]` or include in same commit

**Refactoring:**
- Keep behavior same
- Update multiple files if needed
- Test that commands still work as expected
- Commit: `refactor(scope): [description]`

## README.md Synchronization

**When to update README:**
- New command added → add table row
- Command modified → update description
- Command deleted → remove table row
- Command renamed → update link and name
- Status changed → update badge

**Commit strategy:**
- Include README update in same commit as command/rule change, OR
- Separate commit: `docs(readme): sync with [command-name]`

**Table format:**
```markdown
| [**command&#8209;name**](commands/filename.md) | ![Status](badge-url) | Description |
```

## Branch Management

**Feature branches:**
- Branch from master
- One feature/fix per branch
- Keep branches focused and short-lived
- Sync with master before PR

**After merge:**
- Delete feature branch
- Pull latest master
- Start new branch for next change

**Branch protection:**
- No direct commits to master
- Require PR for all changes
- Keep master stable and clean

## Merge Strategy

**Before merging:**
- All changes reviewed
- README.md in sync
- No conflicts with master
- Commit messages follow format
- Branch up to date

**Merge method:**
- Squash and merge for feature branches
- Keeps master history clean
- Preserves full history in branches

**After merge:**
- Delete merged branch
- Monitor for any issues
- Verify workspace still works correctly

## Versioning and Tagging

**When to tag:**
- Significant workspace updates
- Major command or rule additions
- Breaking changes to structure
- Milestone releases

**Tag format:**
- `v1.2.3` for version tags
- Annotated tags with changelog
- Push tags to remote

**Version bumps:**
- MAJOR: Breaking changes to structure or workflow
- MINOR: New commands or rules added
- PATCH: Bug fixes or minor updates

## Collaboration

**Communication:**
- Keep changes focused and understandable
- Discuss major changes before implementation
- Document reasoning in commits and PRs
- Share knowledge about workspace organization

**Review focus:**
- Content quality (commands, rules)
- Adherence to guidelines (length, format, structure)
- README.md synchronization
- Commit message quality
- No framework-specific or language-specific content in shared rules
