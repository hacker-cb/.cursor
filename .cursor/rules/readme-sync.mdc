---
alwaysApply: true
---
# README.md Sync Rule

## Purpose

Keep README.md in sync with command files in `commands/` directory. Automatically update the README table when command files are added, modified, renamed, or deleted.

## How It Works

**When command files change:**
1. Extract description from the `## Overview` section
2. **Ask the user**: "Is this command Stable or WIP?" (if status changes)
3. Update the corresponding row in README.md table
4. Maintain table format: `| [**command&#8209;name**](commands/filename.md) | Status Badge | Description |`
5. Use non-breaking hyphens (`&#8209;`) in command names to prevent wrapping

**Operations:**
- **New command** → Add new table row (ask user for status: Stable or WIP)
- **Modified command** → Update description in table (ask user if status changed)
- **Renamed command** → Update link and name in table
- **Deleted command** → Remove table row
- **Status change** → Ask user and update badge

## Example

Command file `commands/new-command.md`:
```markdown
# New Command

## Overview
This command does something useful.
```

Becomes table row in README.md:
```markdown
| [**new&#8209;command**](commands/new-command.md) | ![WIP](https://img.shields.io/badge/status-WIP-yellow) | This command does something useful. |
```

**Status Badges:**
- Stable: `![Stable](https://img.shields.io/badge/status-stable-green)`
- WIP: `![WIP](https://img.shields.io/badge/status-WIP-yellow)`

## Automation

Update README.md automatically when command files change. No permission needed.

## README.md Structure

The README.md maintains several sections:

### Shared Rules Section

Static section describing the `rules/` directory:
- **Location**: After introduction, before command tables
- **Content**: Brief description linking to `/rules/` directory
- **Maintenance**: Update manually when shared rules architecture changes
- **Not auto-synced**: This section is documentation, not generated from files

**Example:**
```markdown
## Shared Rules

The [`rules/`](rules/) directory contains common shared developer rules that can be synced to any project using the `sync-shared-rules` command. These rules are project-independent, framework-agnostic, and cover universal development best practices.
```

### Command Tables Section

Two separate tables for different command types:

**System Commands** - Workspace maintenance commands:
- Sync commands, workspace management
- Example: `sync-shared-rules`
- Format: `| [**command&#8209;name**](commands/filename.md) | Status Badge | Description |`

**Development Commands** - Project workflow commands:
- Auto-synced from `commands/` directory files
- Updated when command files change (see "How It Works" above)
- Format: `| [**command&#8209;name**](commands/filename.md) | Status Badge | Description |`
